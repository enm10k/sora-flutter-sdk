name: test

on:
  push:
    paths-ignore:
      - '.github/workflows/build.yaml'
      - '**.md'
      - 'example'

jobs:
  prepare:
    strategy:
      matrix:
        os: [ macos-12, windows-latest, ubuntu-22.04 ]
    name: Prepare Environment for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      SIGNALING_URL1: ${{ secrets.TEST_SIGNALING_URL1 }}
      SIGNALING_URL2: ${{ secrets.TEST_SIGNALING_URL2 }}
      SIGNALING_URL3: ${{ secrets.TEST_SIGNALING_URL3 }}
      CHANNEL_ID: ${{ secrets.TEST_CHANNEL_ID }}
      METADATA: ${{ secrets.TEST_METADATA }}
    steps:
      - name: Add Masked Secrets
        run: |
          echo "::add-mask::$SIGNALING_URL1"
          echo "::add-mask::$SIGNALING_URL2"
          echo "::add-mask::$SIGNALING_URL3"
          echo "::add-mask::$CHANNEL_ID"
          echo "::add-mask::$METADATA"
      - name: Create Test Channel ID
        if: matrix.os != 'windows-latest'
        run: |
          uuidgen > USER.txt
      - name: Create Test Channel ID (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          [guid]::NewGuid().ToString() | Out-File -FilePath USER.txt
      - name: Add Masked Test Channel ID
        shell: bash
        run: |
          echo "::add-mask::`cat USER.txt`"
          echo "::add-mask::`cat USER.txt`@$CHANNEL_ID"
          echo "CHANNEL_ID=`cat USER.txt`@$CHANNEL_ID" >> "$GITHUB_ENV"
          rm USER.txt
      - uses: actions/checkout@v3
      - name: Generate Configuration
        working-directory: ./integration_test_app
        run: ../scripts/create_env.sh lib/environment.dart "$SIGNALING_URL1,$SIGNALING_URL2,$SIGNALING_URL3" "${{ env.CHANNEL_ID }}" "$METADATA"
      - name: Upload Generated Configuration
        uses: actions/upload-artifact@v2
        with:
          name: environment-dart
          path: ./integration_test_app/lib/environment.dart

  test-ios:
    needs: prepare
    strategy:
      matrix:
        target:
          - ios
          # Sora C++ SDK は x86_64 に非対応
          # - macos
    name: Test on ${{ matrix.target }}
    runs-on: macos-12
    env:
      XCODE: /Applications/Xcode_14.0.1.app
    steps:
      - uses: actions/checkout@v3
      - name: Download Generated Configuration
        uses: actions/download-artifact@v2
        with:
          name: environment-dart
          path: ./integration_test_app/lib/
      - name: Select Xcode Version
        run: sudo xcode-select -s '${{ env.XCODE }}/Contents/Developer'
      - name: Show Xcode Version
        run: xcodebuild -version
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          architecture: x64
      - name: Show Flutter Available Emulators
        run: flutter emulators
      - name: Launch iOS Simulator
        if: matrix.target == 'ios'
        run: flutter emulators --launch apple_ios_simulator
      - name: Show Flutter Available Devices
        if: matrix.target == 'ios'
        run: flutter devices
      - name: Get Flutter Dependencies
        working-directory: ./integration_test_app
        run: flutter pub get
      - name: Run Integration Tests
        working-directory: ./integration_test_app
        run: |
          if [ "${{ matrix.target }}" = "ios" ]; then
            flutter test integration_test/connect_test.dart -d iPhone
          else
            flutter test integration_test/connect_test.dart -d macos
          fi

  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Download Generated Configuration
        uses: actions/download-artifact@v2
        with:
          name: environment-dart
          path: ./integration_test_app/lib/
      - name: Configure Flutter
        working-directory: ./integration_test_app
        run: |
          flutter pub get
          flutter config --enable-windows-desktop
      - name: Run Integration Tests
        working-directory: ./integration_test_app
        run: flutter run -d windows --release --dart-define=TEST_MODE=app_run

  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Download Generated Configuration
        uses: actions/download-artifact@v2
        with:
          name: environment-dart
          path: ./integration_test_app/lib/
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Show Flutter Available Emulators
        run: flutter emulators
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev libva-dev libdrm-dev
      - name: Configure Flutter
        working-directory: ./integration_test_app
        run: |
          flutter pub get
          flutter config --enable-linux-desktop
      - name: Install Sora C++ SDK
        working-directory: ./integration_test_app
        run: |
          ./linux/flutter/ephemeral/.plugin_symlinks/sora_flutter_sdk/linux/install_deps.sh linux/
          export PATH="`pwd`/linux/_install/llvm/clang/bin:$PATH"
      - name: Run Integration Tests
        working-directory: ./integration_test_app
        run: |
          flutter test integration_test/connect_test.dart -d linux
